net = resnet50();

rootDir = "outputs";
if ~isfolder(rootDir)
    mkdir(rootDir);
    n = 100000;
    stylegan.encoder.makeTrainingData(rootDir, n, true, "ukiyoe-faces.mat")
end

imnetMean = shiftdim([0.485, 0.456, 0.406]*255, -1);
imnetStd = shiftdim([0.229, 0.224, 0.225]*255, -1);

lg = layerGraph(net);
lg = lg.removeLayers(["fc1000_softmax", "ClassificationLayer_fc1000"]);
lg = lg.replaceLayer("fc1000", ...
    [fullyConnectedLayer(512, "Name", "fc512")
    regressionLayer("Name", "mse")]);
lg = lg.replaceLayer("input_1", ...
    imageInputLayer([256, 256, 3], ...
                    "Name", "input", ...
                    "Normalization", "zscore", ...
                    "Mean", imnetMean, ...
                    "StandardDeviation", imnetStd));

data1 = load("data.mat");

data = makeTable(rootDir, data1);

training = rand(size(data, 1), 1) < 0.97;
trainData = data(training, :);
valData = data(~training, :);

opts = trainingOptions("adam", ...
    "InitialLearnRate", 5e-4, ...
    "MaxEpochs", 4, ...
    "LearnRateDropFactor", 0.1, ...
    "LearnRateDropPeriod", 3, ...
    "LearnRateSchedule", "piecewise", ...
    "Plots", "training-progress", ...
    "ValidationData", valData, ...
    "ValidationFrequency", 100, ...
    "VerboseFrequency", 100, ...
    "MiniBatchSize", 32, ...
    "Shuffle", "every-epoch", ...
    "ResetInputNormalization", false);

net = trainNetwork(trainData, lg, opts);

save("ukiyoe-encoder.mat", "net")

function outTable = makeTable(rootDir, data)
    filenames = fullfile(rootDir, vertcat(data.filenames{:}));
    outTable = table(filenames, data.ws);

end